This implementation requires the following Python packages:

    sys, math, dill, mmh3, argparse, and numpy

To make things easier, you could use Anaconda and activate environment mmh:

    conda env create -f environment.yml
    source activate mmh

This way, you can be sure to have all dependencies correctly set up.



To build a basic bloom filter, do this:

./bf build -k <key file> -f <fpr> -n <num. distinct keys> -o <output file>

To build a blocked bloom filter, do this:

./bbf build -k <key file> -f <fpr> -n <num. distinct keys> -o <output file>

Here, 0 < fpr < 1, and num. distinct keys > 0.



To perform queries, do this for a basic bloom filter:

./bf query -i <input file> -q <queries>

or do this for a blocked bloom filter:

./bbf query -i <input file> -q <queries>



In the repository, keys.txt and queries.txt are sample inputs. Therefore, 
to experiment, you could try the following:

./bf build -k keys.txt -f 0.2 -n 4 -o bloom.pickle

./bf query -i bloom.pickle -q queries.txt

or:

./bbf build -k keys.txt -f 0.2 -n 4 -o bbloom.pickle

./bf query -i bbloom.pickle -q queries.txt


Source code could be downloaded from: https://github.com/liuy0421/bf